name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run dotnet audit
      run: |
        echo "🔍 Scanning for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerability-report.txt 2>&1 || true
        cat vulnerability-report.txt

    - name: Check for high/critical vulnerabilities
      run: |
        if grep -i "critical\|high" vulnerability-report.txt; then
          echo "❌ Critical or high severity vulnerabilities found!"
          echo "Please review and update vulnerable packages."
          exit 1
        else
          echo "✅ No critical or high severity vulnerabilities found."
        fi

    - name: Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-vulnerability-report
        path: vulnerability-report.txt

  code-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'csharp'
        queries: security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build solution
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run secret scan
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # Look for potential secrets in code
        if grep -r -i "password\|secret\|key\|token" src/ --include="*.cs" --include="*.json" | grep -v "Password.*=" | grep -v "SecretManager" | grep -v "TokenProvider" | grep -v "ClaimTypes" | head -10; then
          echo "⚠️  Found potential hardcoded secrets. Please review:"
        else
          echo "✅ No obvious hardcoded secrets found in source code."
        fi
        
        # Check for secrets in configuration files
        if find . -name "appsettings*.json" -exec grep -l "password\|secret\|key" {} \; | head -5; then
          echo "⚠️  Found potential secrets in configuration files."
          echo "Ensure these are properly externalized to environment variables or secure storage."
        fi

  security-headers:
    name: Security Configuration Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check security configurations
      run: |
        echo "🔍 Checking security configurations..."
        
        # Check for HTTPS enforcement
        if grep -r "UseHttpsRedirection\|RequireHttps" src/ --include="*.cs"; then
          echo "✅ HTTPS redirection found."
        else
          echo "⚠️  Consider implementing HTTPS redirection for production."
        fi
        
        # Check for CORS policy
        if grep -r "UseCors\|AddCors" src/ --include="*.cs"; then
          echo "✅ CORS policy configuration found."
        else
          echo "⚠️  Consider implementing proper CORS policies."
        fi
        
        # Check for authentication
        if grep -r "UseAuthentication\|AddAuthentication" src/ --include="*.cs"; then
          echo "✅ Authentication configuration found."
        else
          echo "⚠️  Authentication not configured."
        fi
        
        # Check for authorization
        if grep -r "UseAuthorization\|AddAuthorization" src/ --include="*.cs"; then
          echo "✅ Authorization configuration found."
        else
          echo "⚠️  Authorization not configured."
        fi

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for security scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: security-scan:latest
        load: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run container structure test
      run: |
        # Install container structure test tool
        curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 \
        && chmod +x container-structure-test-linux-amd64 \
        && sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

        # Create test configuration
        cat > container-test.yaml << 'EOF'
        schemaVersion: 2.0.0
        commandTests:
          - name: "Check non-root user"
            command: "whoami"
            expectedOutput: ["agent"]
        fileExistenceTests:
          - name: "Application files exist"
            path: "/app/Agent.Core.dll"
            shouldExist: true
        EOF

        # Run tests
        container-structure-test test --image security-scan:latest --config container-test.yaml

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, security-headers, docker-security]
    if: always()
    
    steps:
    - name: Generate security summary
      run: |
        echo "🔒 Security Scan Summary"
        echo "========================"
        echo
        echo "📦 Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "🔍 Code Analysis: ${{ needs.code-scan.result }}"
        echo "🔐 Secret Scan: ${{ needs.secret-scan.result }}"
        echo "⚙️  Security Config: ${{ needs.security-headers.result }}"
        echo "🐳 Docker Security: ${{ needs.docker-security.result }}"
        echo
        if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
           [[ "${{ needs.code-scan.result }}" == "failure" ]] || \
           [[ "${{ needs.secret-scan.result }}" == "failure" ]] || \
           [[ "${{ needs.security-headers.result }}" == "failure" ]] || \
           [[ "${{ needs.docker-security.result }}" == "failure" ]]; then
          echo "❌ Some security checks failed. Please review the results."
          exit 1
        else
          echo "✅ All security checks passed!"
        fi