name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test-password-123' }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD || 'test-redis-123' }}
  GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD || 'test-grafana-123' }}

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-project: [
          'tests/Agent.Configuration.Tests',
          'tests/Agent.Core.Tests',
          'tests/Integration/Agent.Integration.Tests',
          'tests/Agent.Observability.Tests',
          'tests/Agent.Orchestration.Tests',
          'tests/Performance/Agent.Performance.Tests',
          'tests/Agent.Security.Tests',
          'tests/Agent.Tools.Samples.Tests'
        ]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: agentdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test ${{ matrix.test-project }} \
          --no-restore \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./test-results \
          --logger trx \
          --logger "console;verbosity=detailed"
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        JWT_SIGNING_KEY: "this-is-a-test-signing-key-for-ci-cd-pipeline-only"
        
    - name: Create artifact name
      id: artifact-name
      run: echo "name=$(echo '${{ matrix.test-project }}' | tr '/' '-')" >> $GITHUB_OUTPUT
        
    - name: List test result files
      if: always()
      run: |
        echo "Looking for test result files..."
        find . -name "*.trx" -type f || echo "No TRX files found"
        find . -name "coverage.cobertura.xml" -type f || echo "No coverage files found"
        ls -la ./test-results/ || echo "test-results directory not found"
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ steps.artifact-name.outputs.name }}
        path: ./test-results/
        if-no-files-found: warn

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.test-project == 'tests/Agent.Security.Tests'
      with:
        directory: ./test-results
        fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install security scanning tools
      run: |
        dotnet tool install --global security-scan
        dotnet tool install --global dotnet-outdated-tool

    - name: Run security scan
      run: |
        security-scan **/*.csproj --excl-dev=true --format=json --output=security-results.json
      continue-on-error: true

    - name: Check for outdated packages
      run: |
        dotnet outdated --output=json > outdated-packages.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          security-results.json
          outdated-packages.json

  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install code formatting tools
      run: |
        dotnet tool install -g dotnet-format

    - name: Verify code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run static analysis
      run: |
        dotnet build --configuration Release --verbosity normal /p:TreatWarningsAsErrors=true

  # Docker build removed - this is a class library framework, not a deployable application
  # If you need Docker builds in the future, create a proper web API project first

  # Integration tests disabled - this is a class library framework
  # When you create a deployable application, re-enable integration testing

  # Deployment disabled - this is a class library framework, not a deployable application
  # When you create a deployable application, re-enable deployment jobs

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint-and-format]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.lint-and-format.result == 'success'
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        echo "🔒 Security: ✅"
        echo "🧪 Tests: ✅"
        echo "📝 Code Quality: ✅"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.lint-and-format.result == 'failure'
      run: |
        echo "❌ Some CI/CD checks failed!"
        echo "🔒 Security: ${{ needs.security-scan.result }}"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "📝 Code Quality: ${{ needs.lint-and-format.result }}"
        exit 1